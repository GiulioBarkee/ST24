---
// Importa la collezione di servizi
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Partner from "../../components/Partner.astro";
import Faq from "../../components/Faq.astro";
import Footer from "../../components/Footer.astro";

// Funzione per generare i percorsi statici basati sul campo 'slug'
export async function getStaticPaths() {
  // Ottieni tutti i servizi dalla collezione
  const servizi = await getCollection("servizi");

  // Mappa ogni servizio per creare un oggetto con 'params'
  return servizi.map((servizio) => ({
    params: { slug: servizio.slug }, // Corrisponde al nome del file dinamico [slug].astro
  }));
}

// Otteniamo lo slug corrente dai parametri URL
const { slug } = Astro.params;

// Otteniamo i dati del servizio corrispondente allo slug
const servizi = await getCollection("servizi");
const servizio = servizi.find((s) => s.slug === slug);

// Verifica che il servizio esista
if (!servizio) {
  throw new Error(`Servizio non trovato per lo slug: ${slug}`);
}

// Dati dei paragrafi e modali (presi dal file YAML della collezione)
const paragraphs = servizio.data.paragraphs || [];
---

<Layout title={servizio.data.title}>
  <Header header2={true}/>
 <h1>{servizio.data.title}</h1>
  <!-- Elenco dei paragrafi con i modali -->
  <section class="paragraphs-section">
    
  <p class="descrizione-servizio">{servizio.data.description}</p>
  
  <div class="grid">
    {paragraphs.map((paragraph, index) => (
      <div class="paragraph-item" key={index}>
        <button class="paragraph-button" data-id={index}>
          {paragraph.title}
        </button>

        <!-- Modale associato -->
        <div class="modal-container" id={`modal-${index}`}>
          <div class="modal-content">
    <div class="container-button">
            <span class="close-button" data-id={index}>âœ•</span>
            </div>
            <h2>{paragraph.title}</h2>
            <p>{paragraph.content}</p>
          </div>
        </div>
        </div>
   
    ))}
  </section>
  <Partner/>
  <Faq/>
  <Footer/>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Apertura del modale al click sul paragrafo
    document.querySelectorAll('.paragraph-button').forEach(button => {
      button.addEventListener('click', (e) => {
        const id = e.target.dataset.id;
        document.getElementById(`modal-${id}`).classList.add('open');
      });
    });

    // Chiusura del modale al click del pulsante di chiusura
    document.querySelectorAll('.close-button').forEach(button => {
      button.addEventListener('click', (e) => {
        const id = e.target.dataset.id;
        document.getElementById(`modal-${id}`).classList.remove('open');
      });
    });
  });
</script>

<style lang="scss">
  h1{padding: var(--padding-viewport); font-size: var(--h2);
    color: var(--ST24-skygreen);
    font-weight: 500; background-color: var(--ST24-skyazure); padding-bottom: 3rem;
  @media (max-width: 768px) {
    padding-bottom: var(--padding-viewport);
  }}
  section{padding: var(--padding-viewport);
    @media (max-width: 768px) {
      padding-block: 4rem;
    }
  .descrizione-servizio{font-size: 1.2rem; opacity: 0.8; padding-bottom: 3rem;
}

.grid {
  display: flex;
  width: 100%;
  @media(max-width: 768px){
    flex-wrap: wrap;
  }

  .paragraph-item {
    margin-bottom: 1rem;
    width: 50%;
    margin-right: 1rem;
    border-bottom: 1px solid #dedede;
    padding-block: 0.5rem;
    transition: opacity 0.3s ease;
    @media(max-width: 768px){
      width: 100%;
    }

    // L'elemento hoverato mantiene opacity 1
    &:hover {
      opacity: 1 !important;
    }
  }

  // Quando si passa con il mouse su un elemento, gli altri avranno opacity 0.5
  &:hover .paragraph-item:not(:hover) {
    opacity: 0.5;
  }
}


    .paragraph-button {
      cursor: pointer;
   background-color: white;
      border: none;
      border-radius: 5px;
      margin-bottom: 0.5rem;
      font-size: var(--link);
      width: 100%;
    text-align: left;
    }

    .modal-container {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
      z-index: 1000;
      overflow-y: auto;

      &.open {
        display: flex;
      }

      .container-button{width: 100%; position: relative;  padding-bottom: 4.5rem;
    border-bottom: 1px solid black;}
      
      .modal-content {
        background: var(--ST24-skyyellow);
        padding: 2rem;
        position: relative;
        margin-left: 40%;
        height: fit-content;
      min-height: 100vh;
        width: 100%;
        @media(max-width: 768px){
margin-left: 0;
        }

        h2{padding-block: 2.5rem; font-size: var(--h3); font-weight: 400;}
        p{font-size: var(--link);}
      }

    .close-button {
  position: absolute;
  width: 40px; 
  height: 40px; 
  border-radius: 50%; 
  border: 2px solid #333; 
  background-color: var(--ST24-skyyellow); 
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
right: 0;

}
    }
  }
</style>
